#+TITLE: ARLJohnston Emacs Configuration
#+Author: Alistair Johnston
#+Description: My Emacs configuration
#+PROPERTY: header-args :tangle ~/.emacs.d/init.el
#+auto_tangle: t
#+STARTUP: showeverything
#+OPTIONS: toc:2

* My Emacs Configuration

** Unorganised
#+BEGIN_SRC emacs-lisp
  (setq ring-bell-function 'ignore)
  (setq-default tab-width 2)
  (setq-default flycheck-emacs-lisp-load-path 'inherit)
  (set-face-attribute 'default nil :font "MonoLisa Nerd Font" 
  (tool-bar-mode -1)
  (scroll-bar-mode -1)
  (global-display-line-numbers-mode 1)
  (setq display-line-numbers-type 'relative)
  
  
  (require 'package)
  (add-to-list 'package-archives
    '("melpa" . "https://melpa.org/packages/"))
  (package-initialize)
  (package-refresh-contents)
  
  (load-theme 'zenburn t)
  
  (unless (package-installed-p 'editorconfig)
    (package-install 'editorconfig))
  
  (use-package copilot
    :straight (:host github :repo "zerolfx/copilot.el" :files ("dist" "*.el"))
    :ensure t)
  (add-hook 'prog-mode-hook 'copilot-mode)
  (define-key copilot-completion-map (kbd "<tab>") 'copilot-accept-completion)
  
  ;; Install magit 
  (straight-use-package 'magit)
  
  ;;lsp mode
  (use-package lsp-mode
  	:straight t)
  (add-to-list 'lsp-language-id-configuration '(nix-mode . "nix"))
  (lsp-register-client
    (make-lsp-client :new-connection (lsp-stdio-connection '("rnix-lsp"))
                    :major-modes '(nix-mode)
                    :server-id 'nix))
  
  (use-package nix-mode
    :mode "\\.nix\\'")
  
  ;; haskell mode
  (use-package haskell-mode
  	:straight t
  	:config
  	(add-hook 'haskell-mode-hook 'interactive-haskell-mode))
  
  (add-to-list 'load-path "~/.emacs.d/lsp/")
  (require 'promela-mode)
  (add-to-list 'auto-mode-alist '("\\.pml\\'" . promela-mode))
#+END_SRC

** Evil Mode Configuration
#+BEGIN_SRC emacs-lisp
  (evil-mode 1)
  (use-package evil
  	:straight t
  	:ensure t)

  (add-to-list 'load-path "~/.emacs.d/evil/")
  (use-package evil-leader)
  (global-evil-leader-mode)
  (evil-leader/set-leader "<SPC>")
  (evil-leader/set-key "." 'fzf-find-file)
  (evil-leader/set-key "bi" 'fzf-switch-buffer)
#+END_SRC

** Org Mode Configuration
#+BEGIN_SRC emacs-lisp
	(use-package org
		:straight t
		:ensure t)

	(setq org-src-preserve-indentation t)

  (require 'org-auto-tangle)
  (add-hook 'org-mode-hook 'org-auto-tangle-mode)
	(setq org-auto-tangle-default t))
#+END_SRC

** FZF Configuration
#+BEGIN_SRC emacs-lisp
	(use-package fzf
    :bind
    ;; Don't forget to set keybinds!
    :config
    (setq fzf/args "-x --tabstop 2 --color dark --print-query --margin=1,0 --no-hscroll"
        fzf/executable "fzf"
        fzf/git-grep-args "-i --line-number %s"
        ;; command used for `fzf-grep-*` functions
        ;; example usage for ripgrep:
        ;; fzf/grep-command "rg --no-heading -nH"
        fzf/grep-command "grep -nrH"
        ;; If nil, the fzf buffer will appear at the top of the window
        fzf/position-bottom t
        fzf/window-height 15))
#+END_SRC

** Company
Globally offer auto completion functionality.
#+BEGIN_SRC emacs-lisp
(use-package company
	:straight t
	:config
	(setq company-idle-delay 0)
	(setq company-minimum-prefix-length 1)
	(global-company-mode t))
#+END_SRC

** Ellama
#+BEGIN_SRC emacs-lisp
(use-package llm-ollama)

(use-package ellama
  :init
  (setopt ellama-language "English")
  (require 'llm-ollama)
  (setopt ellama-provider
		  (make-llm-ollama
		   :chat-model "zephyr:7b-alpha-q5_K_M" :embedding-model "zephyr:7b-alpha-q5_K_M")))
#+END_SRC
